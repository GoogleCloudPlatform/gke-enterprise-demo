# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Deployment for ElasticSearch master nodes
# See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: es-master
  labels:
    component: elasticsearch
    role: master
spec:
  replicas: 3
  # During a rolling update, we want to give ample time for the master eligible
  # nodes to re-elect a new master and commit and publish the new cluster state.
  minReadySeconds: 40
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
        component: elasticsearch
        role: master
  template:
    metadata:
      labels:
        component: elasticsearch
        role: master
    spec:
      initContainers:
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html
      # and https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall
      - name: init-sysctl
        image: busybox:1.27.2
        command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        securityContext:
          privileged: true
      affinity:
        podAntiAffinity:
          # The following sections are two examples of using anti pod affinity.
          # The uncommented section is enabled, or you can use the other example.
          # Both cannot be used at the same time, and thuse the required rule
          # is commented out.
          #
          # This is using pod anti-affinity to ensure that the scheduler tries
          # it best to spread pods
          # see https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity-beta-feature)
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  component: elasticsearch
                  role: master
              topologyKey: kubernetes.io/hostname
          # use pod anti-affinity to force the scheduler to not deploy two
#           es-data pod on the same node.
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - labelSelector:
#                matchLabels:
#                  component: elasticsearch
#                  role: master
#            topologyKey: kubernetes.io/hostname
      containers:
      - name: es-master
        image: quay.io/pires/docker-elasticsearch-kubernetes:6.2.4
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CLUSTER_NAME
          value: myesdb
        # see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-zen.html
        # discovery.zen.minimum_master_nodes
        - name: NUMBER_OF_MASTERS
          value: "2"
        - name: NODE_MASTER
          value: "true"
        - name: NODE_INGEST
          value: "false"
        - name: NODE_DATA
          value: "false"
        # HTTP_ENABLE=true for readinessProbe to work
        # https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-http.html
        - name: HTTP_ENABLE
          value: "true"
        - name: ES_JAVA_OPTS
          value: -Xms512m -Xmx512m
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: "25m"
            memory: "512Mi"
        ports:
        - containerPort: 9300
          name: transport
        # for readinessProbe to work
        - containerPort: 9200
          name: http
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 30
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 60
          timeoutSeconds: 5
        volumeMounts:
        - name: storage
          mountPath: /data
      volumes:
          - emptyDir:
              medium: ""
            name: "storage"
